services:
  - mysql:latest

variables:
  # Configure mysql environment variables (https://hub.docker.com/_/mysql/)
  MYSQL_DATABASE: "nda"
  MYSQL_ROOT_PASSWORD: "password"
  MYSQL_HOST: "mysql"
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository
    - Backend/backend-digital-booking/target

connect:
  image: mysql
  script:
  - echo "SELECT 'OK';" | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host="$MYSQL_HOST"  "$MYSQL_DATABASE"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - package
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - cd Backend/backend-digital-booking
    - mvn compile
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests"
    - cd Backend/backend-digital-booking
    - mvn clean test
    - echo "test done"

package-job:
  stage: package
  script: 
    - echo "arranca package"
    - cd Backend/backend-digital-booking
    - mvn package -Dmaven.test.skip
  artifacts:
    paths:
      - Backend/backend-digital-booking/target/*.jar

deploy_job:
  stage: deploy
  image: python:latest
  only :
    refs:
      - develop

  script:
    - pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - aws s3 cp Backend/backend-digital-booking/target/*.jar s3://$AWS_EB_S3_BACK/argenlombiaApiBooking-$CI_PIPELINE_ID.jar
    - aws elasticbeanstalk create-application-version --application-name $AWS_APP_NAME --version-label $AWS_APP_NAME-$CI_PIPELINE_ID --source-bundle S3Bucket=$AWS_EB_S3_BACK,S3Key=argenlombiaApiBooking-$CI_PIPELINE_ID.jar
    - aws elasticbeanstalk update-environment --application-name $AWS_APP_NAME --environment-name $AWS_APP_NAME_ENV --version-label $AWS_APP_NAME-$CI_PIPELINE_ID


